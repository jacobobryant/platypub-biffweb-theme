#!/usr/bin/env bb
; vim: ft=clojure foldmethod=syntax
(require '[hiccup2.core :as hiccup])
(require '[hiccup.util :refer [raw-string]])
(require '[babashka.curl :as curl])

;;; util

(defn render! [path doctype hiccup]
  (let [path (str "." (str/replace path #"/$" "/index.html"))]
    (io/make-parents path)
    (spit path (str doctype "\n" (hiccup/html hiccup)))))

(defn url-encode [s]
  (java.net.URLEncoder/encode (str s) "UTF-8"))

(defn map->query [m]
  (->> m
       (map (fn [[k v]]
              (str (url-encode (name k)) "=" (url-encode v))))
       (str/join "&")))

(def rfc3339 "yyyy-MM-dd'T'HH:mm:ss.SSSXXX")

(defn cached-img-url [opts]
  (str "https://images.weserv.nl/?" (map->query opts)))

(defn format-date
  ([fmt date]
   (when date
     (.. (java.time.format.DateTimeFormatter/ofPattern fmt)
         (withLocale java.util.Locale/ENGLISH)
         (withZone (java.time.ZoneId/of "UTC"))
         (format (.toInstant date)))))
  ([date]
   (format-date rfc3339 date)))

(def emdash [:span (raw-string "&mdash;")])

(def endash [:span (raw-string "&#8211;")])

(def nbsp [:span (raw-string "&nbsp;")])

(defn base-html
  [{{:site/keys [title description image url]} :site :keys [path]} & body]
  [:html
   {:lang "en-US"
    :style {:min-height "100%"
            :height "auto"}}
   [:head
    [:title title]
    [:meta {:charset "UTF-8"}]
    [:meta {:name "description" :content description}]
    [:meta {:content title :property "og:title"}]
    [:meta {:content description :property "og:description"}]
    (when image
      [:meta {:content image :property "og:image"}])
    [:meta {:content "summary" :name "twitter:card"}]
    [:meta {:content (str url path) :property "og:url"}]
    [:link {:ref "canonical" :href (str url path)}]
    [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
    [:meta {:charset "utf-8"}]
    [:link {:href "/feed.xml",
            :title "Feed for biffweb.com",
            :type "application/atom+xml",
            :rel "alternate"}]
    [:script {:src "https://sa.findka.com/latest.js",
              :data-skip-dnt true
              :defer "defer",
              :async "async"}]
    [:noscript [:img {:alt "", :src "https://sa.findka.com/noscript.gif"}]]
    [:link {:rel "stylesheet" :href "/css/main.css"}]
    [:script {:src "https://unpkg.com/hyperscript.org@0.9.3"}]
    [:link {:href "/feed.xml",
            :title "Biff",
            :type "application/atom+xml",
            :rel "alternate"}]]
   [:body
    {:style {:position "absolute"
             :width "100%"
             :min-height "100%"
             :display "flex"
             :flex-direction "column"}}
    body]])

;;; theme

(defn button [{:keys [href]} label]
  [:a.bg-gray-100.hover:bg-gray-300.text-black.text-center.py-1.px-3.rounded.font-semibold
   {:href href}
   label])

(def logo
  [:div [:a {:href "/"}
         [:img {:src "https://cdn.findka.com/misc/biff-logo-transparent-cropped.png"
                :alt "Biff"
                :style {:max-width "110px"}}]]])

(def hamburger-icon
  [:div.sm:hidden.cursor-pointer
   {:_ "on click toggle .hidden on #nav-menu"}
   (for [_ (range 3)]
     [:div.bg-white
      {:class "h-[4px] w-[30px] my-[6px]"}])])

(def nav-options
  [["Newsletter" "/newsletter/"]
   ["Docs" "/docs/"]
   ["API" "/api/com.biffweb.html"]
   ["Repo" "https://github.com/jacobobryant/biff"]
   ["Community" "/community/"]])

(def navbar
  (list
    [:div.bg-primary.py-2
     [:div.flex.max-w-screen-lg.mx-auto.items-center.text-white.gap-4.text-lg.flex-wrap.px-3
      logo
      [:div.flex-grow]
      (for [[label href] nav-options]
        [:a.hover:underline.hidden.sm:block
         {:href href
          :target (when (= label "API")
                    "_blank")}
         label])
      hamburger-icon]]
    [:div#nav-menu.bg-primary.px-5.py-2.text-white.text-lg.hidden.transition-all.ease-in-out.sm:hidden
     (for [[label href] nav-options]
       [:div.my-2 [:a.hover:underline.text-lg {:href href} label]])]))

(defn byline [{:keys [post/published-at]}]
  [:div
   {:style {:display "flex"
            :align-items "center"}}
   [:img {:src (cached-img-url {:url "https://cdn.findka.com/profile.jpg"
                                :w 200 :h 200})
          :width "50px"
          :height "50px"
          :style {:border-radius "50%"}}]
   [:div {:style {:width "0.75rem"}}]
   [:div
    [:div {:style {:line-height "1.25"}}
     [:a.text-blue-600.hover:underline
      {:href "https://jacobobryant.com/"
       :target "_blank"}
      "Jacob O'Bryant"]]
    [:div {:style {:line-height "1"
                   :font-size "90%"
                   :color "#4b5563"}}
     (format-date "d MMM yyyy" published-at)]]])

(defn inline-subscribe-form []
  (list
    [:div.text-lg.italic.text-center "Subscribe to get future posts by email."]
    [:div.h-5]
    [:div.flex.justify-center
     [:iframe
      {:style {:margin 0
               :border-radius "0px !important"
               :background-color "transparent"
               :height "52px"}
       :scrolling "no",
       :frameborder "0",
       :data-test-id "beehiiv-embed",
       :src
       "https://embeds.beehiiv.com/154976bf-1f7b-4d0b-82f8-5c1c615f2bbd?slim=true"}]]))

(defn post-page [{:keys [site post] :as opts}]
  (base-html
    (assoc opts :site (assoc site
                             :site/title (:post/title post)
                             :site/description (:post/description post)
                             :site/image (or (:post/image post) (:site/image site))))
    navbar
    [:div.mx-auto.p-3.text-lg.flex-grow.w-full
     {:class (if ((set (:post/tags post)) "video")
               "max-w-screen-lg"
               "max-w-screen-sm")}
     [:div.h-5]
     (when-not ((set (:post/tags post)) "video")
       (list
         (inline-subscribe-form)
         [:div.h-8]))
     [:h1.font-bold.leading-tight.text-gray-900.text-4xl
      (:post/title post)]
     [:div.h-3]
     (byline post)
     [:div.h-5]
     [:div.post-content (raw-string (:post/html post))]
     [:div.h-5]]
    [:iframe
     {:style
      {:style {:border-radius "4px"
               :margin 0
               :background-color "transparent"}},
      :scrolling "no",
      :frameborder "0",
      :height "320",
      :width "100%",
      :data-test-id "beehiiv-embed",
      :src "https://embeds.beehiiv.com/56ef8934-f4a0-460b-ac0c-c29f6370e15f"}]))

(def sponsors
  [{:img "https://avatars.githubusercontent.com/u/19023?v=4"
    :url "https://github.com/tbrooke"}
   {:img "https://avatars.githubusercontent.com/u/53870456?v=4"
    :url "https://github.com/john-shaffer"}
   {:img "https://avatars.githubusercontent.com/u/4767299?v=4"
    :url "https://github.com/jeffp42ker"}
   {:img "https://avatars.githubusercontent.com/u/9289130?v=4"
    :url "https://github.com/wuuei"}])

(defn newsletter-page [{:keys [posts] :as opts}]
  (base-html
    (assoc-in opts [:site :site/title] "Biff: The Newsletter")
    navbar
    [:iframe
     {:style
      {:style {:border-radius "4px"
               :margin 0
               :background-color "transparent"}},
      :scrolling "no",
      :frameborder "0",
      :height "320",
      :width "100%",
      :data-test-id "beehiiv-embed",
      :src "https://embeds.beehiiv.com/154976bf-1f7b-4d0b-82f8-5c1c615f2bbd"}]
    [:div.bg-gray-200.h-full.flex-grow
     [:div.h-10]
     [:div.text-center.text-2xl "Recent posts"]
     [:div.h-10]
     [:div.max-w-screen-sm.mx-auto.px-3
      (for [{:post/keys [title slug published-at description tags]} posts
            :when (not ((set tags) "draft"))]
        [:a.block.mb-5.bg-white.rounded.p-3.hover:bg-gray-100.cursor-pointer
         {:href (str "/p/" slug "/")}
         [:div.text-sm.text-gray-800 (format-date "d MMM yyyy" published-at)]
         [:div.h-1]
         [:div.text-xl.font-bold title]
         [:div.h-1]
         [:div description]])]
     [:div.h-10]]))

(defn community-page [{:keys [posts] :as opts}]
  (base-html
    (assoc-in opts [:site :site/title] "Community | Biff")
    navbar
    [:div.max-w-screen-lg.mx-auto.w-full.px-3
     [:div.h-5]
     [:div.text-2xl "Community"]
     [:div.h-5]
     [:ul
      [:li.max-w-prose.mb-2
       "The #biff channel on "
       [:a.link {:href "http://clojurians.net/" :target "_blank"}
        "Clojurians Slack"]
       " is a great place to ask questions."]
      [:li.max-w-prose.mb-2
       "For long-form discussion, you can go to "
       [:a.link {:href "https://github.com/jacobobryant/biff/discussions"
                 :target "_blank"}
        "GitHub Discussions"] "."]
      [:li.max-w-prose.mb-2
       "Finally, you can always email me directly: "
       [:a.link {:href "mailto:hello@jacobobryant.com"
                 :target "_blank"}
        "hello@jacobobryant.com"] "."]]]))

(defn landing-page [opts]
  (base-html
    opts
    navbar
    [:div.py-10.flex.flex-col.items-center.flex-grow.bg-center.px-3
     [:h1.font-bold.leading-tight.text-4xl.text-center
      {:class "max-w-[300px] sm:max-w-none"}
      "Make your ideas come to life."]
     [:div.h-7]
     [:a.bg-accent.hover:bg-accent-dark.text-white.text-center.py-2.px-8.rounded.font-semibold.text-xl.sm:text-2xl
      {:href "/docs/"}
      "Get Started"]
     [:div.h-7]
     [:div.mx-auto.text-xl.sm:text-2xl.text-center.max-w-xl
      "Biff is a simple, easy, full-stack web framework for Clojure. "
      "Launch new projects quickly without getting bogged down in complexity later."]
     [:div.h-10]
     [:div.max-w-screen-sm.mx-auto.bg-primary.rounded.text-white.px-3.py-2.code
       [:span.text-blue-400 "# Create a new project:"] [:br]
       "bash <(curl -s https://biffweb.com/new-project.sh)"]]
    [:div.bg-gray-200.py-5
     [:div.max-w-screen-md.mx-auto.px-2
      [:div.text-lg.sm:text-xl.text-center.mx-auto
       {:class "max-w-[520px]"}
       "Biff curates libraries and tools from across the ecosystem "
       "and composes them into one polished whole."]
      [:div.h-5]
      [:div.grid.sm:grid-cols-2.gap-4
       [:div.bg-white.p-3.rounded
        [:div.font-bold [:a.link {:href "https://xtdb.com/" :target "_blank"} "XTDB"]]
        [:div.h-1]
        [:div "Flexible data modeling, expressive Datalog queries, and immutable history. "
         "Biff adds schema enforcement with "
         [:a.link {:href "https://github.com/metosin/malli" :target "_blank"} "Malli"] "."]]
       [:div.bg-white.p-3.rounded
        [:div.font-bold [:a.link {:href "https://htmx.org/" :target "_blank"} "htmx"]]
        [:div.h-1]
        "Create interactive, real-time applications with HTML instead of JavaScript. Throw in a dash of "
        [:a.link {:href "https://hyperscript.org/" :target "_blank"} "hyperscript"]
        " for light frontend scripting."]
       [:div.bg-white.p-3.rounded
        [:div [:strong.text-blue-600 "Ready to deploy"]]
        [:div.h-1]
        [:div "Biff comes with code for setting up an Ubuntu VPS, including Git push-to-deploy, HTTPS certificates, "
         "and NGINX configuration."]]
       [:div.bg-white.p-3.rounded
        [:div [:strong.text-blue-600 "Develop in prod 😈"]]
        [:div.h-1]
        [:div "Whenever you save a file, any new code will be immediately hot swapped into the server."
         " (Don't worry, it's optional!)"]]]
      [:div.h-5]
      [:div.sm:text-lg.text-center
       "...and several other carefully chosen pieces. Biff clocks in at under 2,000 lines of code. "
       "It's designed to be taken apart and modified, so it doesn't get in the "
       "way as your needs evolve."]
      [:div.h-5]]]
    [:div.bg-primary.py-5
     [:div.px-2.max-w-screen-md.mx-auto.w-full.text-white
      [:div.text-2xl.font-bold.text-center "Sponsors"]
      [:div.h-5]
      [:div.flex.items-center.justify-center.flex-col.sm:flex-row
       [:a {:href "https://juxt.pro/"
            :target "_blank"}
        [:img.bg-primary.sm:mt-4
         {:style {:height "60px"}
          :src "/img/juxt-logo.svg"}]]
       [:div.h-8.w-12]
       [:a {:href "https://www.clojuriststogether.org/"
            :target "_blank"}
        [:img.bg-primary
         {:style {:height "80px"}
          :src "/img/clj-together-logo.svg"}]]]
      [:div.h-8]
      [:div.flex.gap-4.mx-auto.justify-center
       (for [{:keys [img url]} sponsors]
         [:a {:href url :target "_blank"}
          [:img {:src (cached-img-url {:url img :w 160 :h 160})
                 :width "40px"
                 :height "40px"
                 :style {:border-radius "50%"}}]])]
      [:div.h-8]
      [:div.flex.justify-center
       [:a.bg-accent.hover:bg-accent-dark.text-white.text-center.py-2.px-4.rounded.sm:text-lg
        {:href "https://github.com/sponsors/jacobobryant"}
        "Support Biff"]]
      [:div.h-8]]]))

(defn atom-feed [{{:site/keys [title description image url]} :site
                  :keys [posts path]}]
  (let [feed-url (str url path)
        posts (remove #((set (:post/tags %)) "draft") posts)]
    [:feed {:xmlns "http://www.w3.org/2005/Atom"}
     [:title title]
     [:id (url-encode feed-url)]
     [:updated (format-date (:post/published-at (first posts)))]
     [:link {:rel "self" :href feed-url :type "application/atom+xml"}]
     [:link {:href url}]
     (for [{:post/keys [title slug published-at html]} (take 10 posts)
           :let [url (str url "/p/" slug)]]
       [:entry
        [:title {:type "html"} title]
        [:id (url-encode url)]
        [:updated (format-date published-at)]
        [:content {:type "html"} html]
        [:link {:href url}]
        [:author
         [:name "Jacob O'Bryant"]
         [:uri "https://jacobobryant.com/"]]])]))

(def pages
  {"/" landing-page
   "/newsletter/" newsletter-page
   "/community/" community-page})

(defn get-sitemap [{:keys [root url]}]
  (->> (curl/get (str url "/sitemap.txt"))
       :body
       str/split-lines
       (map (fn [path]
              (str root path " " url path "\n")))
       (apply str)))

(defn main [{:keys [site posts] :as opts}]
  (doseq [[path page] pages]
    (render! path
             "<!DOCTYPE html>"
             (page (assoc opts :path path))))
  (doseq [post posts
          :let [path (str "/p/" (:post/slug post) "/")]]
    (render! path
             "<!DOCTYPE html>"
             (post-page (assoc opts :path path :post post))))
  (render! "/feed.xml"
           "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
           (atom-feed (assoc opts :path "/feed.xml")))
  (spit "_redirects" (:site/redirects site))
  (spit "_files" (str (slurp "_files")
                      (get-sitemap {:url "https://biffdocs.netlify.app"
                                    :root "/docs"})
                      (get-sitemap {:url "https://biffapi.netlify.app"
                                    :root "/api"})))
  (shell/sh "tailwindcss"
            "-c" "tailwind.config.js"
            "-i" "tailwind.css"
            "-o" "css/main.css"
            "--minify"))

(main (edn/read-string (slurp "_input.edn")))
nil
